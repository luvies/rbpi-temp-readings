module.exports = (take) => {
  take.options.shell.printStdout = true;
  take.options.shell.printStderr = true;

  const paths = {
    dist: 'src/dist',
    distStatic: 'src/dist/static',
    server: 'src/server',
    serverDist: 'src/server/dist',
    web: 'src/web',
    webDist: 'src/web/build',
    wpDist: 'dist',
    wpDistStatic: 'dist/static'
  };
  const opts = {
    server: {
      spawn: {
        cwd: paths.server
      }
    },
    web: {
      spawn: {
        cwd: paths.web
      }
    },
  };

  return {
    '': {
      desc: 'Builds project',
      deps: [
        'restore',
        'lint',
        'build'
      ]
    },
    'build': {
      deps: [
        'server',
        "web"
      ],
      parallelDeps: true,
      children: {
        'server': {
          async execute() {
            await take.shell('yarn tsc -p .', opts.server);
            await take.exec(`cp -f ${paths.server}/package.json ${paths.server}/yarn.lock ${paths.serverDist}`);
            await take.shell('yarn --prod', {
              spawn: {
                cwd: paths.serverDist
              }
            });
          }
        },
        'web': {
          async execute() {
            await take.shell('yarn build', opts.web);
          }
        }
      },
      async execute() {
        await take.exec('mkdir -p', paths.dist);
        await take.exec('cp -rf', `${paths.serverDist}/`, paths.dist);
        await take.exec('cp -rf', `${paths.webDist}/`, paths.distStatic);
        take.log('Merged dists');
      }
    },
    'restore': {
      desc: 'Restores all packages in this project',
      async execute() {
        await take.shell('yarn', opts.server);
        await take.shell('yarn', opts.web);
      }
    },
    'lint': {
      async execute() {
        await take.shell('yarn tslint --project .', opts.server);
        await take.shell('yarn tslint --project .', opts.web);
      }
    },
    'fix': {
      async execute() {
        await take.shell('yarn tslint --project . --fix', opts.server);
        await take.shell('yarn tslint --project . --fix', opts.web);
      }
    },
    'clean': {
      async execute() {
        await take.exec('rm -rf', paths.dist);
        await take.exec('rm -rf', paths.serverDist);
        await take.exec('rm -rf', paths.webDist);
        await take.exec('rm -rf', paths.wpDist);
      }
    },
    'pack': {
      deps: [
        ':clean',
        ':build:web'
      ],
      async execute() {
        await take.shell('yarn webpack --mode=production', opts.server);
        await take.exec(`mkdir -p ${paths.wpDist} ${paths.wpDistStatic}`);
        await take.exec(`cp -f ${paths.serverDist}/* ${paths.wpDist}/`);
        await take.exec(`cp -rf ${paths.webDist}/* ${paths.wpDistStatic}/`);
        await take.shell('zip -qr rbpi-readings-server *', {
          spawn: {
            cwd: 'dist'
          }
        });
      }
    }
  }
}
